import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all assets generated by vite
precacheAndRoute(self.__WB_MANIFEST);

// Cache the main HTML document
registerRoute(
    ({ request }) => request.destination === 'document',
    new NetworkFirst({
        cacheName: 'pages-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 50,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
            }),
        ],
    })
);

// Cache CSS, JS, and other assets
registerRoute(
    ({ request }) =>
        request.destination === 'style' ||
        request.destination === 'script' ||
        request.destination === 'font', new StaleWhileRevalidate({
        cacheName: 'assets-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 60,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
            }),
        ],
    })
);

// Cache images with CacheFirst strategy
registerRoute(
    ({ request }) => request.destination === 'image',
    new CacheFirst({
        cacheName: 'images-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 100,
                maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
            }),
        ],
    })
);

// Cache API responses with NetworkFirst strategy
registerRoute(
    ({ url }) => url.origin === 'https://story-api.dicoding.dev',
    new NetworkFirst({
        cacheName: 'api-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 50,
                maxAgeSeconds: 5 * 60, // 5 minutes
            }),
        ],
    })
);

// Cache external resources (CDN)
registerRoute(
    ({ url }) =>
        url.origin === 'https://cdnjs.cloudflare.com' ||
        url.origin === 'https://unpkg.com' ||
        url.origin === 'https://fonts.googleapis.com' ||
        url.origin === 'https://fonts.gstatic.com',
    new StaleWhileRevalidate({
        cacheName: 'external-resources-cache',
        plugins: [
            new ExpirationPlugin({
                maxEntries: 30,
                maxAgeSeconds: 7 * 24 * 60 * 60,
            }),
        ],
    })
);

// Offline fallback for navigation requests
registerRoute(
    ({ request }) => request.mode === 'navigate',
    async ({ event }) => {
        try {
            const response = await fetch(event.request);
            return response;
        } catch (error) {
            // Return cached main page as fallback
            const cache = await caches.open('pages-cache');
            const cachedResponse = await cache.match('/');
            return cachedResponse || new Response('Offline - Aplikasi tidak tersedia', { status: 503, statusText: 'Service Unavailable', headers: { 'Content-Type': 'text/plain' } });
        }
    }
);

// Push Notification Event
self.addEventListener('push', (event) => {
    console.log('Service Worker: Push received');
    console.log('Push data:', event.data);
    let notification = {
        title: 'StoryApps',
        options: {
            body: 'Ada pembaruan baru di StoryApps!',
            icon: './src/public/icons/icon-192x192.png',
            badge: './src/public/icons/badge-96x96.png',
            vibrate: [100, 50, 100],
            data: { url: './' },
            actions: [
                { action: 'open', title: 'Buka App', icon: './public/icons/icon-192x192.png' },
                { action: 'close', title: 'Tutup' },
            ],
            requireInteraction: true,
            tag: 'story-notification'
        },
    };

    if (event.data) {
        try {
            // Try to parse as JSON first
            const dataJson = event.data.json();
            console.log('Parsed JSON data:', dataJson);
            if (dataJson.title) {
                notification.title = dataJson.title;
            }
            if (dataJson.body) {
                notification.options.body = dataJson.body;
            }
            if (dataJson.options) {
                notification.options = { ...notification.options, ...dataJson.options };
            }
        } catch (e) {
            console.log('JSON parsing failed, trying as text:', e);
            // If JSON parsing fails, try to get as text
            try {
                const dataText = event.data.text();
                console.log('Parsed text data:', dataText);
                if (dataText) {
                    notification.options.body = dataText;
                }
            } catch (textError) {
                console.error('Error parsing push data as text:', textError);
                // Use default notification if all parsing fails
                notification.options.body = 'Notifikasi baru dari StoryApps';
            }
        }
    }
    console.log('Final notification:', notification);

    event.waitUntil(
        self.registration.showNotification(notification.title, notification.options)
            .then(() => {
                console.log('Notification shown successfully');
            })
            .catch((error) => {
                console.error('Error showing notification:', error);
            })
    );
});

// Notification Click Event
self.addEventListener('notificationclick', (event) => {
    console.log('Service Worker: Notification clicked');
    event.notification.close();
    if (event.action === 'close') {
        return;
    }
    const urlToOpen = event.notification.data && event.notification.data.url
        ? event.notification.data.url
        : './';
    event.waitUntil(
        clients.matchAll({ type: 'window', includeUncontrolled: true })
            .then((clientList) => {
                // Check if app is already open
                for (const client of clientList) {
                    if (client.url.includes(self.location.origin)) {
                        return client.focus();
                    }
                }

                // Open new window if app is not open
                if (clients.openWindow) {
            return clients.openWindow(urlToOpen);
        }
}));
});

// Background Sync for offline actions
self.addEventListener('sync', (event) => {
    console.log('Service Worker: Background sync triggered');
    if (event.tag === 'background-sync') {
        event.waitUntil(
            // Handle background sync tasks here
            console.log('Performing background sync...')
        );
    }
});
// Handle service worker updates
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
}); 